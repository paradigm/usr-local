From c8d55bcf455c5b54e7be63c7f26855a14fe16a2e Mon Sep 17 00:00:00 2001
From: paradigm <paradigm@bedrocklinux.org>
Date: Sat, 29 Dec 2012 17:18:07 -0500
Subject: [PATCH 02/10] added single-window-no-border

---
 dwm-6.0-single_window_no_border.diff |   97 ++++++++++++++++++++++++++++++++++
 dwm.c                                |   44 ++++++++++++++--
 2 files changed, 136 insertions(+), 5 deletions(-)
 create mode 100644 dwm-6.0-single_window_no_border.diff

diff --git a/dwm-6.0-single_window_no_border.diff b/dwm-6.0-single_window_no_border.diff
new file mode 100644
index 0000000..f2ad4b9
--- /dev/null
+++ b/dwm-6.0-single_window_no_border.diff
@@ -0,0 +1,97 @@
+Author: Jan Christoph Ebersbach <jceb@e-jc.de>
+URL: http://dwm.suckless.org/patches/noborder
+This patch removes the border when there is just one window visible in tiled or
+monocle layout.
+
+diff -r ec4baab78314 dwm.c
+--- a/dwm.c	Mon Dec 19 15:38:30 2011 +0100
++++ b/dwm.c	Fri Apr 06 08:23:31 2012 +0200
+@@ -1191,7 +1191,7 @@
+ 
+ void
+ monocle(Monitor *m) {
+-	unsigned int n = 0;
++	unsigned int n = 0, r = 0;
+ 	Client *c;
+ 
+ 	for(c = m->clients; c; c = c->next)
+@@ -1199,8 +1199,17 @@
+ 			n++;
+ 	if(n > 0) /* override layout symbol */
+ 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
+-	for(c = nexttiled(m->clients); c; c = nexttiled(c->next))
+-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, False);
++	for(c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
++		/* remove border when in monocle layout */
++		if(c->bw) {
++			c->oldbw = c->bw;
++			c->bw = 0;
++			r = 1;
++		}
++		resize(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw), False);
++		if(r)
++			resizeclient(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw));
++	}
+ }
+ 
+ void
+@@ -1703,7 +1712,7 @@
+ 
+ void
+ tile(Monitor *m) {
+-	unsigned int i, n, h, mw, my, ty;
++	unsigned int i, n, h, mw, my, ty, r;
+ 	Client *c;
+ 
+ 	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+@@ -1714,17 +1723,36 @@
+ 		mw = m->nmaster ? m->ww * m->mfact : 0;
+ 	else
+ 		mw = m->ww;
+-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
++	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
++		if(n == 1) {
++			if (c->bw) {
++				/* remove border when only one window is on the current tag */
++				c->oldbw = c->bw;
++				c->bw = 0;
++				r = 1;
++			}
++		}
++		else if(!c->bw && c->oldbw) {
++			/* restore border when more than one window is displayed */
++			c->bw = c->oldbw;
++			c->oldbw = 0;
++			r = 1;
++		}
+ 		if(i < m->nmaster) {
+ 			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
+ 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
++			if(r)
++				resizeclient(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw));
+ 			my += HEIGHT(c);
+ 		}
+ 		else {
+ 			h = (m->wh - ty) / (n - i);
+ 			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), False);
++			if(r)
++				resizeclient(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw));
+ 			ty += HEIGHT(c);
+ 		}
++	}
+ }
+ 
+ void
+@@ -1741,6 +1769,12 @@
+ 		return;
+ 	selmon->sel->isfloating = !selmon->sel->isfloating || selmon->sel->isfixed;
+ 	if(selmon->sel->isfloating)
++		/* restore border when moving window into floating mode */
++		if(!selmon->sel->bw && selmon->sel->oldbw) {
++			selmon->sel->bw = selmon->sel->oldbw;
++			selmon->sel->oldbw = 0;
++		}
++	if(selmon->sel->isfloating)
+ 		resize(selmon->sel, selmon->sel->x, selmon->sel->y,
+ 		       selmon->sel->w, selmon->sel->h, False);
+ 	arrange(selmon);
diff --git a/dwm.c b/dwm.c
index 1d78655..35bbd7f 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1191,7 +1191,7 @@ maprequest(XEvent *e) {
 
 void
 monocle(Monitor *m) {
-	unsigned int n = 0;
+	unsigned int n = 0, r = 0;
 	Client *c;
 
 	for(c = m->clients; c; c = c->next)
@@ -1199,8 +1199,17 @@ monocle(Monitor *m) {
 			n++;
 	if(n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for(c = nexttiled(m->clients); c; c = nexttiled(c->next))
-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, False);
+	for(c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+		/* remove border when in monocle layout */
+		if(c->bw) {
+			c->oldbw = c->bw;
+			c->bw = 0;
+			r = 1;
+		}
+		resize(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw), False);
+		if(r)
+			resizeclient(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw));
+	}
 }
 
 void
@@ -1703,7 +1712,7 @@ textnw(const char *text, unsigned int len) {
 
 void
 tile(Monitor *m) {
-	unsigned int i, n, h, mw, my, ty;
+	unsigned int i, n, h, mw, my, ty, r;
 	Client *c;
 
 	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
@@ -1714,17 +1723,36 @@ tile(Monitor *m) {
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
 		mw = m->ww;
-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
+		if(n == 1) {
+			if (c->bw) {
+				/* remove border when only one window is on the current tag */
+				c->oldbw = c->bw;
+				c->bw = 0;
+				r = 1;
+			}
+		}
+		else if(!c->bw && c->oldbw) {
+			/* restore border when more than one window is displayed */
+			c->bw = c->oldbw;
+			c->oldbw = 0;
+			r = 1;
+		}
 		if(i < m->nmaster) {
 			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
+			if(r)
+				resizeclient(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw));
 			my += HEIGHT(c);
 		}
 		else {
 			h = (m->wh - ty) / (n - i);
 			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), False);
+			if(r)
+				resizeclient(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw));
 			ty += HEIGHT(c);
 		}
+	}
 }
 
 void
@@ -1741,6 +1769,12 @@ togglefloating(const Arg *arg) {
 		return;
 	selmon->sel->isfloating = !selmon->sel->isfloating || selmon->sel->isfixed;
 	if(selmon->sel->isfloating)
+		/* restore border when moving window into floating mode */
+		if(!selmon->sel->bw && selmon->sel->oldbw) {
+			selmon->sel->bw = selmon->sel->oldbw;
+			selmon->sel->oldbw = 0;
+		}
+	if(selmon->sel->isfloating)
 		resize(selmon->sel, selmon->sel->x, selmon->sel->y,
 		       selmon->sel->w, selmon->sel->h, False);
 	arrange(selmon);
-- 
1.7.2.5

